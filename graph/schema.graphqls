type User {
  id: ID!
  name: String!
}

interface Node {
  id: ID!
  name: String!
  owner: User!
  parent: Folder
}

type Folder implements Node {
  id: ID!
  name: String!
  owner: User!
  parent: Folder
  children: [Node!]!
}

type File implements Node {
  id: ID!
  name: String!
  owner: User!
  parent: Folder
  content: String!
}

enum AccessType {
  READ
  WRITE
}

type Access {
  user: User!
  type: AccessType!
  target: Node!
}

type Query {
  node(id: ID): Node
}

type Mutation {
  renameNode(id: ID!, name: String!): Node
  moveNode(id: ID!, parentID: ID): Node
  shareNode(userID: ID!, type: AccessType!, targetID: ID!): Access

  createFolder(parentID: ID, name: String!): Folder

  createFile(parentID: ID, name: String!, content: String): File
  writeFile(id: ID!, content: String!): File

}
