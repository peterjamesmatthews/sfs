package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string) (*User, error) {
	return nil, errors.New("not implemented: CreateUser - createUser")
}

// RenameNode is the resolver for the renameNode field.
func (r *mutationResolver) RenameNode(ctx context.Context, id string, name string) (Node, error) {
	return nil, errors.New("not implemented: RenameNode - renameNode")
}

// MoveNode is the resolver for the moveNode field.
func (r *mutationResolver) MoveNode(ctx context.Context, id string, parentID *string) (Node, error) {
	return nil, errors.New("not implemented: MoveNode - moveNode")
}

// ShareNode is the resolver for the shareNode field.
func (r *mutationResolver) ShareNode(ctx context.Context, userID string, accessType AccessType, targetID string) (*Access, error) {
	return nil, errors.New("not implemented: ShareNode - shareNode")
}

// CreateFolder is the resolver for the createFolder field.
func (r *mutationResolver) CreateFolder(ctx context.Context, parentID *string, name string) (*Folder, error) {
	return nil, errors.New("not implemented: CreateFolder - createFolder")
}

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, parentID *string, name string, content *string) (*File, error) {
	return nil, errors.New("not implemented: CreateFile - createFile")
}

// WriteFile is the resolver for the writeFile field.
func (r *mutationResolver) WriteFile(ctx context.Context, id string, content string) (*File, error) {
	return nil, errors.New("not implemented: WriteFile - writeFile")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
