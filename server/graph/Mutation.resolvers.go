package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
	"fmt"
)

// RenameNode is the resolver for the renameNode field.
func (r *mutationResolver) RenameNode(ctx context.Context, id string, name string) (Node, error) {
	user, err := handleGettingUserFromContext(ctx, r.AuthN)
	if err != nil {
		return nil, err
	}

	node, err := r.SFS.RenameNode(user, id, name)
	if err != nil {
		return nil, fmt.Errorf("failed to rename node %s: %w", id, err)
	}

	return node, nil
}

// MoveNode is the resolver for the moveNode field.
func (r *mutationResolver) MoveNode(ctx context.Context, id string, parentID *string) (Node, error) {
	user, err := handleGettingUserFromContext(ctx, r.AuthN)
	if err != nil {
		return nil, err
	}

	if parentID == nil {
		root, err := r.SFS.GetRoot(user)
		if err != nil {
			return nil, fmt.Errorf("failed to get root: %w", err)
		}
		parentID = &root.ID
	}

	node, err := r.SFS.MoveNode(user, id, *parentID)
	if err != nil {
		return nil, fmt.Errorf("failed to move node %s to parent %s", id, *parentID)
	}

	return node, nil
}

// ShareNode is the resolver for the shareNode field.
func (r *mutationResolver) ShareNode(ctx context.Context, userID string, accessType AccessType, targetID string) (*Access, error) {
	panic(fmt.Errorf("not implemented: ShareNode - shareNode"))
}

// CreateFolder is the resolver for the createFolder field.
func (r *mutationResolver) CreateFolder(ctx context.Context, parentID *string, name string) (*Folder, error) {
	user, err := handleGettingUserFromContext(ctx, r.AuthN)
	if err != nil {
		return nil, err
	}

	if name == "" {
		return nil, errors.New("missing folder name")
	}

	var parent Folder
	if parentID != nil {
		parent, err = r.SFS.GetFolderByID(user, *parentID)
		if err != nil {
			return nil, fmt.Errorf("failed to get parent %s: %w", *parentID, err)
		}
	} else {
		parent, err = r.SFS.GetRoot(user)
		if err != nil {
			return nil, fmt.Errorf("failed to get root: %w", err)
		}
	}

	folder := Folder{
		ID:     r.UUIDGen.Generate().String(),
		Name:   name,
		Owner:  &user,
		Parent: &parent,
	}

	folder, err = r.SFS.InsertFolder(user, folder)
	if err != nil {
		return nil, fmt.Errorf("failed to insert folder: %w", err)
	}

	return &folder, nil
}

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, parentID *string, name string, content *string) (*File, error) {
	user, err := handleGettingUserFromContext(ctx, r.AuthN)
	if err != nil {
		return nil, err
	}

	var parent Folder
	if parentID != nil {
		parent, err = r.SFS.GetFolderByID(user, *parentID)
		if err != nil {
			return nil, fmt.Errorf("failed to get parent %s: %w", *parentID, err)
		}
	} else {
		parent, err = r.SFS.GetRoot(user)
		if err != nil {
			return nil, fmt.Errorf("failed to get root: %w", err)
		}
	}

	if content == nil {
		content = new(string)
	}

	file := File{
		ID:      r.UUIDGen.Generate().String(),
		Name:    name,
		Owner:   &user,
		Parent:  &parent,
		Content: *content,
	}

	file, err = r.SFS.InsertFile(user, file)
	if err != nil {
		return nil, fmt.Errorf("failed to insert file: %w", err)
	}

	return &file, nil
}

// WriteFile is the resolver for the writeFile field.
func (r *mutationResolver) WriteFile(ctx context.Context, id string, content string) (*File, error) {
	user, err := handleGettingUserFromContext(ctx, r.AuthN)
	if err != nil {
		return nil, err
	}

	file, err := r.SFS.WriteFile(user, id, content)
	if err != nil {
		return nil, fmt.Errorf("failed to write file %s: %w", id, err)
	}

	return &file, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
