directive @Authenticated on FIELD_DEFINITION

# User represents a user of the shared file system
type User {
  id: ID!
  name: String!
}

# Tokens represents a user's access and refresh tokens.
type Tokens {
  access: String!
  refresh: String!
}

# Node is the interface for something in the file system.
interface Node {
  id: ID!
  name: String!
  owner: User!
  parent: Folder
}

# Folder is a node of the file system that holds other nodes.
type Folder implements Node {
  # Node fields
  id: ID!
  name: String!
  owner: User!
  parent: Folder

  # Folder field
  children: [Node!]!
}

# File is a node of the file system that contents content.
type File implements Node {
  # Node fields
  id: ID!
  name: String!
  owner: User!
  parent: Folder

  # File field
  content: String!
}

# AccessType signifies read-only or read-write access to a node
enum AccessType {
  READ
  WRITE
}

# Access represents a user's access to a node.
type Access {
  user: User!
  type: AccessType!
  target: Node!
}

# Mutation is the root mutation type.
#
# It defines the interface in which clients will mutate the shared file system with.
type Mutation {
  # refreshTokens returns new access and refresh tokens.
  refreshTokens(refresh: String!): Tokens

  # renameNode changes the name of a node.
  renameNode(id: ID!, name: String!): Node @Authenticated

  # moveNode changes the parent of a node.
  moveNode(id: ID!, parentID: ID): Node @Authenticated

  # shareNode grants a user access to a node.
  shareNode(userID: ID!, accessType: AccessType!, targetID: ID!): Access
    @Authenticated

  # createFolder creates a new folder under an optional parent.
  #
  # If no parent is provided, the folder is created under the root.
  createFolder(parentID: ID, name: String!): Folder @Authenticated

  # createFile creates a new file under an optional parent.
  #
  # If no parent is provided, the file is created under the root.
  createFile(parentID: ID, name: String!, content: String): File @Authenticated

  # writeFile updates the contents of a file.
  writeFile(id: ID!, content: String!): File @Authenticated
}

# Query is the root query type.
#
# It defines the interface in which clients will query the shared file system with.
type Query {
  # getTokens returns access and refresh tokens for a user authenticated with Auth0.
  getTokensFromAuth0(token: String!): Tokens!

  # Me returns the current user.
  Me: User! @Authenticated
}
