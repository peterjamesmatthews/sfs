// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pjm.dev/sfs/db/model"
)

func newAccess(db *gorm.DB, opts ...gen.DOOption) access {
	_access := access{}

	_access.accessDo.UseDB(db, opts...)
	_access.accessDo.UseModel(&model.Access{})

	tableName := _access.accessDo.TableName()
	_access.ALL = field.NewAsterisk(tableName)
	_access.ID = field.NewString(tableName, "id")
	_access.User = field.NewString(tableName, "user")
	_access.Type = field.NewString(tableName, "type")
	_access.Node = field.NewString(tableName, "node")

	_access.fillFieldMap()

	return _access
}

type access struct {
	accessDo

	ALL  field.Asterisk
	ID   field.String
	User field.String
	Type field.String
	Node field.String

	fieldMap map[string]field.Expr
}

func (a access) Table(newTableName string) *access {
	a.accessDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a access) As(alias string) *access {
	a.accessDo.DO = *(a.accessDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *access) updateTableName(table string) *access {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.User = field.NewString(table, "user")
	a.Type = field.NewString(table, "type")
	a.Node = field.NewString(table, "node")

	a.fillFieldMap()

	return a
}

func (a *access) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *access) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user"] = a.User
	a.fieldMap["type"] = a.Type
	a.fieldMap["node"] = a.Node
}

func (a access) clone(db *gorm.DB) access {
	a.accessDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a access) replaceDB(db *gorm.DB) access {
	a.accessDo.ReplaceDB(db)
	return a
}

type accessDo struct{ gen.DO }

type IAccessDo interface {
	gen.SubQuery
	Debug() IAccessDo
	WithContext(ctx context.Context) IAccessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccessDo
	WriteDB() IAccessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccessDo
	Not(conds ...gen.Condition) IAccessDo
	Or(conds ...gen.Condition) IAccessDo
	Select(conds ...field.Expr) IAccessDo
	Where(conds ...gen.Condition) IAccessDo
	Order(conds ...field.Expr) IAccessDo
	Distinct(cols ...field.Expr) IAccessDo
	Omit(cols ...field.Expr) IAccessDo
	Join(table schema.Tabler, on ...field.Expr) IAccessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccessDo
	Group(cols ...field.Expr) IAccessDo
	Having(conds ...gen.Condition) IAccessDo
	Limit(limit int) IAccessDo
	Offset(offset int) IAccessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccessDo
	Unscoped() IAccessDo
	Create(values ...*model.Access) error
	CreateInBatches(values []*model.Access, batchSize int) error
	Save(values ...*model.Access) error
	First() (*model.Access, error)
	Take() (*model.Access, error)
	Last() (*model.Access, error)
	Find() ([]*model.Access, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Access, err error)
	FindInBatches(result *[]*model.Access, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Access) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccessDo
	Assign(attrs ...field.AssignExpr) IAccessDo
	Joins(fields ...field.RelationField) IAccessDo
	Preload(fields ...field.RelationField) IAccessDo
	FirstOrInit() (*model.Access, error)
	FirstOrCreate() (*model.Access, error)
	FindByPage(offset int, limit int) (result []*model.Access, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a accessDo) Debug() IAccessDo {
	return a.withDO(a.DO.Debug())
}

func (a accessDo) WithContext(ctx context.Context) IAccessDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accessDo) ReadDB() IAccessDo {
	return a.Clauses(dbresolver.Read)
}

func (a accessDo) WriteDB() IAccessDo {
	return a.Clauses(dbresolver.Write)
}

func (a accessDo) Session(config *gorm.Session) IAccessDo {
	return a.withDO(a.DO.Session(config))
}

func (a accessDo) Clauses(conds ...clause.Expression) IAccessDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accessDo) Returning(value interface{}, columns ...string) IAccessDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accessDo) Not(conds ...gen.Condition) IAccessDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accessDo) Or(conds ...gen.Condition) IAccessDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accessDo) Select(conds ...field.Expr) IAccessDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accessDo) Where(conds ...gen.Condition) IAccessDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accessDo) Order(conds ...field.Expr) IAccessDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accessDo) Distinct(cols ...field.Expr) IAccessDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accessDo) Omit(cols ...field.Expr) IAccessDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accessDo) Join(table schema.Tabler, on ...field.Expr) IAccessDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accessDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccessDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accessDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccessDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accessDo) Group(cols ...field.Expr) IAccessDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accessDo) Having(conds ...gen.Condition) IAccessDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accessDo) Limit(limit int) IAccessDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accessDo) Offset(offset int) IAccessDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccessDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accessDo) Unscoped() IAccessDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accessDo) Create(values ...*model.Access) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accessDo) CreateInBatches(values []*model.Access, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accessDo) Save(values ...*model.Access) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accessDo) First() (*model.Access, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Access), nil
	}
}

func (a accessDo) Take() (*model.Access, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Access), nil
	}
}

func (a accessDo) Last() (*model.Access, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Access), nil
	}
}

func (a accessDo) Find() ([]*model.Access, error) {
	result, err := a.DO.Find()
	return result.([]*model.Access), err
}

func (a accessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Access, err error) {
	buf := make([]*model.Access, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accessDo) FindInBatches(result *[]*model.Access, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accessDo) Attrs(attrs ...field.AssignExpr) IAccessDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accessDo) Assign(attrs ...field.AssignExpr) IAccessDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accessDo) Joins(fields ...field.RelationField) IAccessDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accessDo) Preload(fields ...field.RelationField) IAccessDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accessDo) FirstOrInit() (*model.Access, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Access), nil
	}
}

func (a accessDo) FirstOrCreate() (*model.Access, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Access), nil
	}
}

func (a accessDo) FindByPage(offset int, limit int) (result []*model.Access, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accessDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accessDo) Delete(models ...*model.Access) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accessDo) withDO(do gen.Dao) *accessDo {
	a.DO = *do.(*gen.DO)
	return a
}
